// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/auth.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface FindOrCreateUserRequest {
  id: string;
  nodeId: string;
  avatarUrl: string;
  login: string;
  name: string;
}

export interface FindOrCreateUserResponse {
  id: string;
}

export interface IssueTokenByUserIdRequest {
  id: string;
}

export interface IssueTokenByUserIdResponse {
  accessToken: string;
  refreshToken: string;
}

export interface VerifyTokenRequest {
  token: string;
  isRefresh: boolean;
}

export interface VerifyTokenResponse {
  sub: string;
  type: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  findOrCreateUser(request: FindOrCreateUserRequest, metadata?: Metadata): Observable<FindOrCreateUserResponse>;

  issueTokenByUserId(request: IssueTokenByUserIdRequest, metadata?: Metadata): Observable<IssueTokenByUserIdResponse>;

  verifyToken(request: VerifyTokenRequest, metadata?: Metadata): Observable<VerifyTokenResponse>;
}

export interface AuthServiceController {
  findOrCreateUser(
    request: FindOrCreateUserRequest,
    metadata?: Metadata,
  ): Promise<FindOrCreateUserResponse> | Observable<FindOrCreateUserResponse> | FindOrCreateUserResponse;

  issueTokenByUserId(
    request: IssueTokenByUserIdRequest,
    metadata?: Metadata,
  ): Promise<IssueTokenByUserIdResponse> | Observable<IssueTokenByUserIdResponse> | IssueTokenByUserIdResponse;

  verifyToken(
    request: VerifyTokenRequest,
    metadata?: Metadata,
  ): Promise<VerifyTokenResponse> | Observable<VerifyTokenResponse> | VerifyTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findOrCreateUser", "issueTokenByUserId", "verifyToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
