// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/llama.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "llama";

export interface CreateLLamaRequestRequest {
  userId: string;
  codesagaRequestId: string;
  requestType: string;
  codeContext: string;
}

export interface CreateLLamaRequestResponse {
  id: string;
  response: string;
}

export const LLAMA_PACKAGE_NAME = "llama";

export interface LlamaServiceClient {
  createLLamaRequest(request: CreateLLamaRequestRequest, metadata?: Metadata): Observable<CreateLLamaRequestResponse>;
}

export interface LlamaServiceController {
  createLLamaRequest(
    request: CreateLLamaRequestRequest,
    metadata?: Metadata,
  ): Promise<CreateLLamaRequestResponse> | Observable<CreateLLamaRequestResponse> | CreateLLamaRequestResponse;
}

export function LlamaServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createLLamaRequest"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("LlamaService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("LlamaService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LLAMA_SERVICE_NAME = "LlamaService";
