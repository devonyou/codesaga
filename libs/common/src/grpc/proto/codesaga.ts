// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/codesaga.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "codesaga";

export interface CreateCodesagaRequest {
  userId: string;
  requestType: string;
  language: string;
  codeContext: string;
  filepath: string;
  lineNumber: number;
}

export interface CreateCodesagaResponse {
  id: string;
  requestType: string;
  language: string;
  codeContext: string;
  user: CreateCodesagaResponse_User | undefined;
}

export interface CreateCodesagaResponse_User {
  id: string;
  name: string;
}

export const CODESAGA_PACKAGE_NAME = "codesaga";

export interface CodesagaServiceClient {
  createCodesaga(request: CreateCodesagaRequest, metadata?: Metadata): Observable<CreateCodesagaResponse>;
}

export interface CodesagaServiceController {
  createCodesaga(
    request: CreateCodesagaRequest,
    metadata?: Metadata,
  ): Promise<CreateCodesagaResponse> | Observable<CreateCodesagaResponse> | CreateCodesagaResponse;
}

export function CodesagaServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createCodesaga"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CodesagaService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CodesagaService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CODESAGA_SERVICE_NAME = "CodesagaService";
