// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/chat.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "chat";

export interface FindManyRoomsRequest {
  userId: string;
}

export interface FindManyRoomsResponse {
  rooms: Room[];
}

export interface Room {
  id: string;
  user: User | undefined;
}

export interface User {
  id: string;
  name: string;
}

export interface FindOrCreateChatRoomRequest {
  userId: string;
  roomId: string;
}

export interface FindOrCreateChatRoomResponse {
  room: Room | undefined;
}

export interface CreateMessageRequest {
  userId: string;
  message: string;
  roomId: string;
}

export interface CreateMessageResponse {
}

export const CHAT_PACKAGE_NAME = "chat";

export interface ChatServiceClient {
  findManyRooms(request: FindManyRoomsRequest, metadata?: Metadata): Observable<FindManyRoomsResponse>;

  findOrCreateChatRoom(
    request: FindOrCreateChatRoomRequest,
    metadata?: Metadata,
  ): Observable<FindOrCreateChatRoomResponse>;

  createMessage(request: CreateMessageRequest, metadata?: Metadata): Observable<CreateMessageResponse>;
}

export interface ChatServiceController {
  findManyRooms(
    request: FindManyRoomsRequest,
    metadata?: Metadata,
  ): Promise<FindManyRoomsResponse> | Observable<FindManyRoomsResponse> | FindManyRoomsResponse;

  findOrCreateChatRoom(
    request: FindOrCreateChatRoomRequest,
    metadata?: Metadata,
  ): Promise<FindOrCreateChatRoomResponse> | Observable<FindOrCreateChatRoomResponse> | FindOrCreateChatRoomResponse;

  createMessage(
    request: CreateMessageRequest,
    metadata?: Metadata,
  ): Promise<CreateMessageResponse> | Observable<CreateMessageResponse> | CreateMessageResponse;
}

export function ChatServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findManyRooms", "findOrCreateChatRoom", "createMessage"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CHAT_SERVICE_NAME = "ChatService";
